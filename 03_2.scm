(use-modules (srfi srfi-1))

(define (navigate cmd acc)
  (let ((pos (last acc)))
    (let ((x (string->number (string-copy cmd 1))))
      (let ((d (string-copy cmd 0 1)))
        (if (string=? d "U")
          (do ((i 1 (1+ i))) ((> i x))
            (append! acc (list (cons (car pos) (+ i (cdr pos)))))))
        (if (string=? d "D")
          (do ((i 1 (1+ i))) ((> i x))
            (append! acc (list (cons (car pos) (- (cdr pos) i))))))
        (if (string=? d "L")
          (do ((i 1 (1+ i))) ((> i x))
            (append! acc (list (cons (- (car pos) i) (cdr pos))))))
        (if (string=? d "R")
          (do ((i 1 (1+ i))) ((> i x))
            (append! acc (list (cons (+ i (car pos)) (cdr pos))))))
        acc))))

(define (list-min lst)
(reduce min 0 lst))

(let ((p1 (read)))
  (let ((p2 (read)))
    (let ((i (string-split (symbol->string p1) #\,)))
    (let ((j (string-split (symbol->string p2) #\,)))
    (let ((p/1 (fold navigate (list (cons 0 0)) i)))
    (let ((p/2 (fold navigate (list (cons 0 0)) j)))
      (display "Path A length: ")
      (display (length p/1))
      (newline)
      (display "Path B length: ")
      (display (length p/2))
      (newline)
      (display (map (lambda (z) (eq? (car z) (cdr z))) (zip p/1 p/2)))
      ))))))
