(define (get-path cmds p)
  (display cmds)
  (newline)
  (if (null? (cdr cmds))
    p
    ((navigate (car cmds))
    (get-path (cdr cmds) p))))

(define (navigate cmd)
  (let ((x (string->number (string-copy cmd 1))))
    (let ((d (string-copy cmd 0 1)))
      (if (string=? d "U")
        (display "up"))
      (if (string=? d "D")
        (display "down"))
      (if (string=? d "L")
        (display "left"))
      (if (string=? d "R")
        (display "right"))
      (display x))))

(let ((p1 (read)))
  (let ((p2 (read)))
    (let ((i (string-split (symbol->string p1) #\,)))
    (let ((j (string-split (symbol->string p2) #\,)))
    (display i)
    (newline)
    (display j)
    (newline)
    (let ((p/1 (get-path i (list))))
    (let ((p/2 (get-path j (list))))
      (display p/1)
      (display p/2)
    ))))))


